
package com.mpas.cems.sec.config;

import com.mpas.cems.ex.ConfigurationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.web.csrf.CsrfTokenRepository;
import org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository;


/**
 * TODO 53. Complete definition of this class
 *  - add the proper annotations to mark this class as a Security Configuration class
 *  - configure an AuthenticationManager by completing the configureGlobal method body
 *   add the following username/password/roles:
 *   jane/ doe/ USER, ADMIN
 *   john/ doe/ USER
 *   admin/ admin/ ADMIN
 *  - do not forget to use a password encoder
 *  - complete the definition of the configure method in order to implement the following:
 *      allow any user access to  resources,images, styles
 *      allow only ADMIN users should be able to edit persons
 *      allow access to any other page for authenticated users
 *      configure the default Spring Security login form to be used
 *      set the default page to be shown to the user after login to be /home
 *      set a CSRF token generated by the repository bean already defined for you
 */
public class SecurityConfig extends WebSecurityConfigurerAdapter{

    @Autowired
    public void configureGlobal(AuthenticationManagerBuilder auth) {
        try {
            auth.inMemoryAuthentication();
        } catch (Exception e) {
            throw new ConfigurationException("In-Memory authentication was not configured.", e);
        }
    }

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests();
    }

    @Bean
    public CsrfTokenRepository repo() {
        HttpSessionCsrfTokenRepository repo = new HttpSessionCsrfTokenRepository();
        repo.setParameterName("_csrf");
        repo.setHeaderName("X-CSRF-TOKEN");
        return repo;
    }
}
